<!doctype html>
<html lang="en" data-bs-theme="dark">
<head prefix="og: https://ogp.me/ns#">
    <%- include('../snippets/head.ejs'); %>
    <link href="/assets/custom/css/index.css" rel="stylesheet">
    <link href="https://cdn.datatables.net/v/bs5/jq-3.7.0/dt-2.1.4/b-3.1.1/b-colvis-3.1.1/fh-4.0.1/r-3.0.2/sc-2.4.3/sl-2.0.5/sr-1.4.1/datatables.min.css" rel="stylesheet">
    <style>
        table.dataTable td.dt-type-numeric, table.dataTable th.dt-type-numeric {
            text-align: initial;
        }

        #detailsTableBody span {
            word-wrap: break-word;
        }

        #detailsTableBody .bi-clipboard {
            cursor: pointer;
        }

        #detailsTableBody .bi-clipboard:active {
            color: #9aabee;
        }

        :root {
            --dt-row-selected: var(--bs-tertiary-bg-rgb);
        }
    </style>
</head>
<body>
<div>
    <div id="overlay" class="hidden">
        <div id="loader" class="hidden"></div>
    </div>
</div>
<div class="container mt-4">
    <%- include('../snippets/navbar.ejs'); %>
    <div class="row">
        <div class="col-md-12">
            <div class="card border-primary mb-3">
                <div class="card-header">
                    <div>
                        Current Entries
                        <% if(loginType === "bucket") { %>
                            for bucket: <%- bucket.bucketToken; -%>
                        <% } %>
                    </div>
                    <% if(loginType === "bucket" && bucket.type === "PREMIUM") { %>
                        <div class="alert alert-info mt-3"><i class="bi bi-question-circle"></i> This is a <%-bucket.type-%> bucket, this means that you get unlimited expiry.</div>
                    <% } %>
                </div>
                <div class="card-body">
                    <table class="table submissionsTable datatables display nowrap" data-type="entries">
                        <thead>
                        <tr>
                            <th scope="col">ID</th>
                            <th scope="col">file Name</th>
                            <th scope="col">file Extension</th>
                            <th scope="col">file Size</th>
                            <th scope="col">Created At</th>
                            <th scope="col">expires</th>
                            <th scope="col">mediaType</th>
                            <th scope="col">Views</th>
                            <th scope="col">file Name on system</th>
                            <th scope="col">url</th>
                            <th scope="col">Bucket</th>
                        </tr>
                        </thead>
                    </table>
                </div>
                <% if(loginType === "bucket") { %>
                    <div class="card-footer">
                        <div class="float-end">
                            <button class="btn btn-danger" id="deleteBucket">Delete bucket</button>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
    <div class="row mt-4"
    <% if(loginType === "user") { %>>
        <div class="col-md-12">
            <div class="card border-primary mb-3">
                <div class="card-header">Blocked Ips</div>
                <div class="card-body">
                    <table class="table blockedIpsTable datatables display nowrap" data-type="ips">
                        <thead>
                        <tr>
                            <th scope="col">ID</th>
                            <th scope="col">ip</th>
                            <th scope="col">Blocked On</th>
                        </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
        <% } %>
    </div>
</div>
<!--modals-->
<div id="modals">
    <div class="modal fade" id="fileDetailsModel" tabindex="-1" aria-labelledby="fileDetailsModelLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="fileDetailsModelLabel">File Details</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="fileDetailsModelInfoContent">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-12 table-responsive">
                                <table class="table table-striped table-hover">
                                    <tbody id="detailsTableBody">

                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="fileUploadModel" tabindex="-1" aria-labelledby="fileUploadModelLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="fileDetailsModelLabel">File Upload</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="fileDetailsModelInfoContent">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-12 mb-3">
                                <div>
                                    <label for="radioFileSelectFile" class="form-label">File</label>
                                    <div class="input-group">
                                        <div class="input-group-text">
                                            <input class="form-check-input mt-0" name="radioFileSelect" id="radioFileSelectFile" type="radio" aria-label="Radio button for selecting file" checked>
                                        </div>
                                        <input class="form-control" type="file" id="uploadFile" aria-label="Choose file">
                                    </div>
                                </div>
                                <div class="mt-3">
                                    <label for="radioFileSelectUrl" class="form-label">URL</label>
                                    <div class="input-group">
                                        <div class="input-group-text">
                                            <input class="form-check-input mt-0" id="radioFileSelectUrl" name="radioFileSelect" type="radio" aria-label="Radio button for following selecting URL">
                                        </div>
                                        <input type="text" id="url" class="form-control" aria-label="URL text input" placeholder="https://somedomain.com/your-file.jpg" disabled="disabled">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row py-2">
                            <div class="col-md-3">
                                <label for="expires" class="form-label">Expires</label>
                                <input type="text" class="form-control" id="expires" placeholder="Eg 3d, 5h or 10m">
                            </div>
                            <div class="col-md-6">
                                <label for="password" class="form-label">Password</label>
                                <input type="password" class="form-control" id="password" placeholder="Optional">
                            </div>
                        </div>
                        <div class="row py-2">
                            <div class="col-md-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="" id="hideFilename">
                                    <label class="form-check-label" for="hideFilename">
                                        Hide Filename
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="" id="oneTimeDownload">
                                    <label class="form-check-label" for="oneTimeDownload">
                                        One Time Download
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="row py-2">
                            <div class="col-md-12 hidden" id="error">
                                <div class="alert alert-danger" id="errorContent"></div>
                            </div>
                            <div class="col-md-12 hidden" id="success">
                                <div class="alert alert-success" style="overflow: hidden;text-overflow: ellipsis;">
                                    File Successfully Uploaded <br /> <span id="fileUploadedUrl"></span>
                                </div>
                            </div>
                        </div>
                        <div class="row py-2">
                            <div class="col-md-12">
                                <div class="progress" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" id="progressWrapper">
                                    <div id="uploadProgress" class="progress-bar progress-bar-striped progress-bar-animated" style="width: 0"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary btn-file-upload">Upload File</button>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>


<script src="https://cdn.datatables.net/v/bs5/jq-3.7.0/dt-2.1.4/b-3.1.1/b-colvis-3.1.1/fh-4.0.1/r-3.0.2/sc-2.4.3/sl-2.0.5/sr-1.4.1/datatables.min.js"></script>
<%- include('../snippets/scripts.ejs'); %>
<script>
    Site.loadPage(async site => {
        const dtMap = new Map();

        document.getElementById("filesNav").classList.add("active");

        const bucketId = <%- loginType === "bucket" ? `"${bucket.bucketToken}";` : "null;"; -%>


            function loadDt() {
                const detailsModal = new bootstrap.Modal(document.getElementById("fileDetailsModel"), { keyboard: false });

                const uploadModal = new bootstrap.Modal(document.getElementById("fileUploadModel"), { keyboard: false });
                const progressWrapper = document.getElementById("progressWrapper");
                const progressbar = document.getElementById("uploadProgress");

                document.querySelector('.btn-file-upload').addEventListener('click', () => {
                    const file = document.getElementById('uploadFile').files[0];
                    const url = document.getElementById('url').value;
                    const expires = document.getElementById('expires').value;
                    const password = document.getElementById('password').value;
                    const hideFileName = document.getElementById('hideFilename').checked;
                    const oneTimeDownload = document.getElementById('oneTimeDownload').checked;

                    uploadFile(file, url, bucketId, expires, password, hideFileName, oneTimeDownload);
                });

                document.getElementById('radioFileSelectFile').addEventListener('change', function() {
                    const radioFile = document.getElementById('radioFileSelectFile');
                    const urlInput = document.getElementById('url');
                    const fileInput = document.getElementById('uploadFile');
                    if (radioFile.checked) {
                        urlInput.value = null;
                        urlInput.disabled = true;
                        fileInput.disabled = false;
                    }
                });

                document.getElementById('radioFileSelectUrl').addEventListener('change', function() {
                    const radioUrl = document.getElementById('radioFileSelectUrl');
                    const urlInput = document.getElementById('url');
                    const fileInput = document.getElementById('uploadFile');
                    if (radioUrl.checked) {
                        fileInput.value = null;
                        fileInput.disabled = true;
                        urlInput.disabled = false;
                    }
                });

                function resetProgress() {
                    progressbar.style.width = "0%";
                    progressbar.innerText = "";
                    progressWrapper.setAttribute("aria-valuenow", "0");
                }

                async function uploadFile(file, url, bucket, expires, password, hideFilename, oneTimeDownload) {
                    const restrictions = await getRestrictions();
                    const max_upload_size = restrictions ? restrictions.filter(x => x.type === "MAX_FILE_SIZE")[0].value : null;
                    const banned_mime_type = restrictions ? restrictions.filter(x => x.type === "BANNED_MIME_TYPE")[0].value : null;
                    const uploadButton = document.querySelector('.btn-file-upload');
                    const fileUploadSuccess = document.getElementById("fileUploadedUrl");
                    fileUploadSuccess.innerHTML = null;

                    uploadButton.disabled = true;
                    let params = `hide_filename=${hideFilename}&one_time_download=${oneTimeDownload}`;
                    if (expires) {
                        params += `&expires=${expires}`;
                    }

                    if (file && max_upload_size && file.size > max_upload_size) {
                        Site.showError(`File is too large (server limit is ${sizeAsMB()(max_upload_size,"display","")})`);
                        uploadButton.disabled = false;
                        return;
                    }

                    if (file && file.type!=="" && banned_mime_type && banned_mime_type.indexOf(file.type) !== -1) {
                        Site.showError(`File is a banned type (server bans ${banned_mime_type})`);
                        uploadButton.disabled = false;
                        return;
                    }

                    const formData = new FormData();
                    if (url) {
                        formData.append('url', url)
                    } else {
                        formData.append('file', file);
                    }

                    if (password) {
                        formData.append('password', password);
                    }

                    const xhr = new XMLHttpRequest();
                    let fileUploadUrl = `${baseUrl}`;
                    if(bucket){
                        fileUploadUrl += `/${bucket}?${params}`;
                    }else{
                        fileUploadUrl += `?${params}`;
                    }
                    xhr.open('PUT', fileUploadUrl, true);

                    xhr.upload.onprogress = function(event) {
                        if (event.lengthComputable) {
                            const uploadDone = Math.round((event.loaded / event.total) * 100) + "%";
                            progressbar.innerText = uploadDone;
                            progressbar.style.width = uploadDone;
                            progressWrapper.setAttribute("aria-valuenow", Math.round((event.loaded / event.total) * 100).toString());
                        }
                    };

                    xhr.onload = function() {
                        const response =  JSON.parse(xhr.response);
                        if (xhr.status === 200 || xhr.status === 201) {
                            const url = encodeURI(response.url);
                            const btn = document.createElement("button");
                            btn.className = "btn btn-sm btn-outline-primary mt-3 d-block";
                            btn.addEventListener("click", () => navigator.clipboard.writeText(url));
                            btn.textContent = "Copy to clipboard";

                            const anchor = document.createElement("a");
                            anchor.setAttribute("target", "_blank");
                            anchor.setAttribute("href", url);
                            anchor.textContent = url;
                            fileUploadSuccess.append(anchor);
                            anchor.after(btn);
                            // fileUploadSuccess.innerHTML = `<a target="_blank" href="${response.url}">${response.url}</a> <button class="btn btn-sm btn-outline-primary" role="button" onclick="navigator.clipboard.writeText(response);">Copy to clipboard</button>`;
                            Site.showSuccess();
                        } else {
                            Site.showError('Error uploading file: ' + response.message);
                        }
                        resetProgress();
                        reloadTable(["entries"]);
                        uploadButton.disabled = false;
                    };

                    xhr.onerror = function() {
                        Site.showError('Network error.');
                        resetProgress();
                        uploadButton.disabled = false;
                    };

                    xhr.send(formData);
                }

                function sizeAsMB() {
                    return function(data, type, row) {
                        if (type === "display") {
                            const sizeKB = Math.floor(data / 1024);
                            const sizeMB = Math.floor(sizeKB / 1024);
                            if (data < 1024) {
                                return `${data} B`;
                            }
                            if (sizeKB < 1024) {
                                return `${sizeKB} KB`;
                            }
                            return `${sizeMB} MB`;
                        }
                        return data;
                    };
                }

                function addDetailInfo(detailArr) {
                    const copyButtons = ["IP", "URL", "Original Name"];
                    document.getElementById("detailsTableBody").innerHTML = detailArr.map(details => {
                        const header = details[0];
                        let data = details[1];
                        if (header === "URL") {
                            data = `<a href='${data}' target='_blank'><span>${data}</span></a>`;
                        } else {
                            data = `<span>${data}</span>`;
                        }
                        if (copyButtons.includes(header)) {
                            data += `<i title="Copy value to clipboard" class='bi bi-clipboard ms-1' onclick='navigator.clipboard.writeText("${encodeURI(details[1])}");'></i>`;
                        }
                        return `<tr><th>${header}</th><td>${data}</td></tr>`;
                    }).join("");
                }

                function renderNullField() {
                    return function(data, type, row) {
                        return data ?? "N/A";
                    };
                }

                function colouredIP() {
                    return function(data, type, row) {
                        if (type === "display") {
                            let sizedData = data;
                            if (data.length > 15) {
                                const splitData = data.split(":");
                                sizedData = `${splitData[0]}: ... :${splitData[splitData.length - 1]}`;
                            }
                            if (row.ipBanned) {
                                return `<span class="text-danger">${sizedData}</span>`;
                            }
                            return sizedData;
                        }
                        return data;
                    };
                }

                function customDate() {
                    return function(data, type, row) {
                        if (type === "display") {
                            return new Date(Date.parse(data)).toLocaleString();
                        }
                        return data;
                    };
                }

                function fileEmbedRender() {
                    return function(data, type, row) {
                        const url = row.url;
                        const notProtected = row.fileProtectionLevel === "None" && !row.oneTimeDownload;
                        const ext = url.match(/\.(mp4|ogg|webm)$/)?.[1];
                        let filename = data || `${row.fileName}`; // filename here is originalFileName. but hidden files do not have it, so get the filename on disk
                        if (ext && !data) {
                            filename += `.${ext}`;
                        }
                        if (notProtected) {
                            if (url.match(/\.(jpeg|jpg|gif|png|webp)$/) != null) {
                                const imageTag = `<img width='auto' height='240' src='${url}' />`
                                return `<span class="text-primary" data-bs-toggle="tooltip" data-bs-html="true" data-bs-placement="right" data-bs-title="${imageTag}">${filename}</span>`;
                            } else if (url.match(/\.(mp4|ogg|webm)$/) != null) {
                                let type = `video/${ext}`;
                                const videoTag = `<video width='auto' height='240' autoplay><source src='${url}' type='${type}'></video>`;
                                return `<span class="text-primary" data-bs-toggle="tooltip" data-bs-html="true" data-bs-placement="right" data-bs-title="${videoTag}">${filename}</span>`;
                            } else if (url.match(/\.(pdf)$/) != null) {
                                const pdfTag = `<embed class='pdf' width='auto' height='240' src='${url}'>`
                                return `<span class="text-primary" data-bs-toggle="tooltip" data-bs-html="true" data-bs-placement="right" data-bs-title="${pdfTag}">${filename}</span>`;
                            }
                        }
                        return `<span>${filename}</span>`;
                    };
                }


                function getDataMapping(type) {
                    switch (type) {
                        case "ips":
                            return [
                                { data: "id" },
                                { data: "ip" },
                                { data: "createdAt", render: customDate() }
                            ];
                        case "entries":
                            return [
                                { data: "id" },
                                { data: "originalFileName", className: "col-filename", render: fileEmbedRender() },
                                { data: "fileExtension", className: "col-fileext" },
                                { data: "fileSize", render: sizeAsMB() },
                                { data: "createdAt", render: customDate() },
                                { data: "expires", render: renderNullField() },
                                { data: "mediaType", render: renderNullField() },
                                { data: "views" },
                                { data: "fileName" },
                                { data: "url" },
                                { data: "bucket", render: renderNullField() }
                            ];
                    }
                }

                async function unBanIps(ips) {
                    Site.loading(true);
                    let response;
                    try {
                        response = await fetch(`${baseUrlSecureRest}/unblockIps`, {
                            method: "POST",
                            headers: {
                                "Accept": "application/json",
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(ips)
                        });
                    } catch (e) {
                        alert(e.message);
                        return false;
                    } finally {
                        Site.loading(false);
                    }
                    const responseStatus = response.status;
                    const responseJson = await response.json();
                    if (responseStatus !== 200) {
                        alert(responseJson.message);
                        throw new Error(responseJson.message);
                    }
                }

                async function banIp(ip, removeRelatedData = false) {
                    Site.loading(true);
                    let response;
                    try {
                        response = await fetch(`${baseUrlSecureRest}/blockIp?removeRelatedData=${removeRelatedData}`, {
                            method: "POST",
                            headers: { "Content-Type": "application/x-www-form-urlencoded" },
                            body: new URLSearchParams({ ip })
                        });
                    } catch (e) {
                        alert(e.message);
                        return false;
                    } finally {
                        Site.loading(false);
                    }
                    const responseStatus = response.status;
                    const responseJson = await response.json();
                    if (responseStatus !== 200) {
                        alert(responseJson.message);
                        throw new Error(responseJson.message);
                    }
                }

                async function deleteEntry(ids) {
                    Site.loading(true);
                    let response;
                    try {
                        response = await fetch(`${baseUrlSecureRest}/deleteEntries`, {
                            method: "DELETE",
                            headers: {
                                "Accept": "application/json",
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(ids)
                        });
                    } catch (e) {
                        alert(e.message);
                        return false;
                    } finally {
                        Site.loading(false);
                    }
                    const responseStatus = response.status;
                    const responseJson = await response.json();
                    if (responseStatus !== 200) {
                        alert(responseJson.message);
                        throw new Error(responseJson.message);
                    }
                }

                async function getRestrictions() {
                    Site.loading(true);
                    let response;
                    try {
                        response = await fetch(`${baseUrl}/resources/restrictions`);
                    } catch(e) {
                        alert(e.message);
                        return null;
                    } finally {
                        Site.loading(false);
                    }
                    const responseStatus = response.status;
                    const responseJson = await response.json();
                    if (responseStatus !== 200) {
                        Site.showError(responseJson.message);
                        throw new Error(responseJson.message);
                    }
                    return responseJson;
                }

                function getButtons(type) {
                    const buttons = [];
                    if (type === "entries") {
                        buttons.push({
                                extend: "selected",
                                text: "Delete file",
                                attr: { id: "deleteFilesButton" },
                                action: async (e, dt) => {
                                    const accepted = confirm("Are you sure you want to delete these entries?, the files will also be deleted");
                                    if (!accepted) {
                                        return;
                                    }
                                    const idArr = [];
                                    dt.rows({ selected: true }).every(function() {
                                        const data = this.data();
                                        idArr.push(data.id);
                                    });
                                    await deleteEntry(idArr);
                                    reloadTable(["entries"]);
                                }
                            },
                                <% if(loginType === "user") { %>
                            {
                                extend: "selectedSingle",
                                text: "Ban IP",
                                attr: { id: "banIpButton" },
                                action: async (e, dt) => {
                                    const accepted = confirm("Are you sure you want to ban this IP?");
                                    if (!accepted) {
                                        return;
                                    }
                                    const deleteRelatedData = confirm("Do you want to also delete all related data?\nPress 'Cancel' for no and 'Ok' for Yes");
                                    const selectedRow = dt.row({ selected: true }).data();
                                    const ip = selectedRow.ip;
                                    await banIp(ip, deleteRelatedData);
                                    reloadTable(["entries", "ips"]);
                                }
                            },
                                <% } %>
                            {
                                extend: "selectedSingle",
                                text: "Details",
                                attr: { id: "detailsButton" },
                                action: async (e, dt) => {
                                    const selectedRow = dt.row({ selected: true }).data();
                                    const detailArr = [
                                        ["ID", selectedRow.id],
                                        ["File Name", selectedRow.fileName],
                                        ["File Ext", selectedRow.fileExtension],
                                        ["Original Name", selectedRow.originalFileName],
                                        ["Media Type", selectedRow.mediaType],
                                        ["File Size", selectedRow.fileSize],
                                        ["File Protection Level", selectedRow.fileProtectionLevel],
                                        ["Created At", customDate()(selectedRow.createdAt, "display", selectedRow)],
                                        ["Expires", selectedRow.expires ?? "N/A"],
                                        ["IP", selectedRow.ip],
                                        ["URL", selectedRow.url],
                                        ["Bucket", selectedRow.bucket ?? "N/A"],
                                    ];
                                    addDetailInfo(detailArr);
                                    detailsModal.show();
                                }
                            },
                            {
                                extend: "selectedSingle",
                                text: "Download file",
                                attr: { id: "downloadFileButton" },
                                action: async (e, dt) => {
                                    const selectedRow = dt.row({ selected: true }).data();
                                    const url = selectedRow.url;
                                    window.open(url, "_blank");
                                    if (selectedRow.oneTimeDownload) {
                                        setTimeout(function() {
                                            reloadTable(["entries"]);
                                        }, 1000);
                                    }
                                }
                            },
                            {
                                text: "Upload file",
                                attr: { id: "uploadFileButton" },
                                action: async (e, dt) => {
                                    uploadModal?.show();
                                }
                            },
                        );
                    } else if (type === "ips") {
                        buttons.push({
                            extend: "selected",
                            text: "Un-ban",
                            attr: { id: "downloadFileButton" },
                            action: async (e, dt) => {
                                const accepted = confirm("Are you sure you want to remove the ban for the selected ip(s)?");
                                if (!accepted) {
                                    return;
                                }
                                const ipArr = [];
                                dt.rows({ selected: true }).every(function() {
                                    const data = this.data();
                                    ipArr.push(data.ip);
                                });
                                await unBanIps(ipArr);
                                dt.rows({ selected: true }).remove().draw(false);
                                reloadTable(["entries"]);
                            }
                        });
                    }
                    return buttons;
                }

                function reloadTable(types) {
                    for (const type of types) {
                        dtMap.get(type)?.ajax.reload();
                    }
                }

                function initSelectListeners(type) {
                    function disableButtonsOnSelection(value, buttons) {
                        if (value) {
                            buttons.disable();
                        } else {
                            buttons.enable();
                        }
                    }

                    const table = dtMap.get(type);
                    if (type === "entries") {
                        table.on("select", function(e, dt, type, indexes) {
                            if (type === "row") {
                                const data = table
                                    .rows(indexes)
                                    .data()
                                    .pluck("ipBanned");
                                disableButtonsOnSelection(data.get(0), table.buttons(["#banIpButton"]));
                            }
                        });
                    }
                    table.on("draw.dt", () => {
                        site.initTooltips();
                    });
                }

                $(".datatables").each(async function() {
                    const el = $(this)[0];
                    const type = el.dataset.type;
                    let url = null;
                    switch (type) {
                        case "ips":
                            url = `${baseUrlSecureRest}/blockedIps`;
                            break;
                        case "entries":
                            url = `${baseUrlSecureRest}/datatablesEntries`;
                    }
                    const dtOpts = {
                        layout: {
                            top2Start: "buttons",
                            topStart: {
                                pageLength: {
                                    menu: [10, 25, 50, 100]
                                }
                            },
                            topEnd: {
                                search: {
                                    placeholder: "Type search here"
                                }
                            },
                            bottomEnd: "paging"
                        },
                        stateSave: true,
                        paging: true,
                        fixedHeader: {
                            header: true
                        },
                        responsive: true,
                        autoWidth: false,
                        scrollY: 600,
                        scrollX: false,
                        scrollCollapse: true,
                        select: {
                            style: "multi"
                        },
                        columns: getDataMapping(type),
                        buttons: getButtons(type)
                    };
                    if (type === "entries") {
                        dtOpts.ajax = url;
                        dtOpts.processing = true;
                        dtOpts.serverSide = true;
                        dtOpts.language = {
                            loadingRecords: "No data available"
                        };
                    } else if (type === "ips") {
                        dtOpts.ajax = {
                            url,
                            dataSrc: ""
                        };
                    }
                    site.loading(true);
                    const table = new DataTable(el, dtOpts);
                    site.loading(false);
                    if (dtMap.has(type)) {
                        dtMap.get(type).push(table);
                    } else {
                        dtMap.set(type, table);
                    }
                    initSelectListeners(type);
                });
            }

        loadDt();

        document.getElementById("deleteBucket")?.addEventListener("click", async () => {
            const confirmation = confirm("Are you sure you want to delete this bucket? all files associated with it will also be deleted");
            if (!confirmation) {
                return;
            }
            const resp = await fetch(`${baseUrl}/bucket/${bucketId}`, {
                method: "DELETE"
            });
            if (!resp.ok) {
                const err = await resp.json();
                alert(`error ${err.status} - ${err.message}`);
                return;
            }
            await resp.text();
            window.location.replace(mainRul);
        });
    });
</script>
</body>
</html>
